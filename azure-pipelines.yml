trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

variables:
  nodeVersion: '18.x'

stages:
  - stage: CleanArtifacts
    displayName: 'Clean gh-pages branch'
    jobs:
    - job: CleanArtifactsFromGhPages
      displayName: 'Clean artifacts from gh-pages branch'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self
          clean: true
          persistCredentials: true

        - script: |
            git config --global user.name "azure-pipelines[bot]"
            git config --global user.email "azure-pipelines@dev.azure.com"

            git fetch origin

            # Verifica se a branch gh-pages existe
            if git ls-remote --exit-code --heads origin gh-pages; then
              echo "Branch gh-pages já existe. Fazendo checkout..."
              git checkout gh-pages
            else
              echo "Branch gh-pages não existe. Criando..."
              git checkout --orphan gh-pages
              git rm -rf .
              echo "Inicialização da gh-pages" > index.html
              git add index.html
              git commit -m "Init gh-pages"
              git push origin gh-pages
            fi

            # Limpa os arquivos da branch
            git rm -rf . || true
            git clean -fxd
            git commit --allow-empty -m "Complete cleanup of gh-pages"
            git push origin gh-pages
          displayName: 'Verifica/cria e limpa branch gh-pages'

  - stage: CI
    dependsOn: CleanArtifacts
    displayName: 'Run Cypress Tests'
    jobs:
      - job: CypressTests
        strategy:
          matrix:
            chrome:
              browser: chrome
            edge:
              browser: edge
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(HOME)/.npm

          - script: npm install
            displayName: 'Install dependencies'

          - script: npm run lint:fix
            displayName: 'Run ESLint'

          - script: |
              npx cypress run --browser $(browser) --spec "cypress/e2e/gui/authentication/loginGUI.cy.js,cypress/e2e/api/authentication/loginAPI.cy.js" --reporter mochawesome --reporter-options reportDir=cypress/reports/mochawesome,overwrite=false,html=false,json=true
            displayName: 'Run Cypress'
            continueOnError: true

          - script: npm run report:merge
            displayName: 'Merge test reports'

          - script: npm run report:generate
            displayName: 'Generate HTML report'

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: 'cypress'
              artifactName: 'cypress-artifacts-$(browser)'
              publishLocation: 'Container'
              condition: always()

  - stage: CD
    dependsOn: CI
    displayName: 'Publish to GitHub Pages'
    jobs:
      - job: Deploy
        strategy:
          matrix:
            chrome:
              browser: chrome
            edge:
              browser: edge
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            persistCredentials: true
            clean: true
            fetchDepth: 0

          - task: DownloadBuildArtifacts@0
            inputs:
              artifactName: 'cypress-artifacts-$(browser)'
              downloadPath: $(Build.SourcesDirectory)/artifacts

          - script: |
              mkdir -p ./$(browser)/videos
              mkdir -p ./$(browser)/screenshots

              cp -r ./artifacts/cypress-artifacts-$(browser)/videos/**/**.mp4 ./$(browser)/videos/ || true
              cp -r ./artifacts/cypress-artifacts-$(browser)/screenshots/**/**.png ./$(browser)/screenshots/ || true
              cp -r ./artifacts/cypress-artifacts-$(browser)/reports/mochawesome/**.** ./$(browser)/ || true
            displayName: 'Organize artifacts'

          - script: |
              mkdir -p ./public
              node generate-index.js
            displayName: 'Generate Index'

          - script: |
              git config user.name "azure-pipelines[bot]"
              git config user.email "azure-pipelines@bot.com"

              git fetch origin

              # Limpa arquivos não rastreados para evitar conflito no checkout
              git clean -fd
              
              git checkout gh-pages || git checkout -b gh-pages origin/gh-pages
              cp -r ./$(browser)/ ./public/index.html ./
              git add .
              git commit -m "Deploy Cypress reports"
              git push origin gh-pages
            displayName: 'Deploy to gh-pages'
